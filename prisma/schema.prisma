// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DogSex {
  F
  M
}

model ClientAddress {
  id              Int      @id @default(autoincrement())
  province        String
  county          String?
  district        String?
  street          String?
  residenceNumber Int?
  Client          Client[]

  @@map("client_addresses")
}

model Client {
  id               Int           @id @default(autoincrement())
  name             String
  lastname         String
  phone            Int?
  email            String        @unique
  password         String
  address          ClientAddress @relation(fields: [addressId], references: [id])
  addressId        Int
  eligibleAdoption Boolean       @default(false)
  Adoption         Adoption[]
  Sell             Sell[]

  @@map("clients")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  lastname   String
  state      Int      @default(1)
  email      String   @unique
  password   String
  isAdmin    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Adoption Adoption[]
  Sell     Sell[]

  @@map("users")
}

model DogCommercialType {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Dog        Dog[]

  @@map("dog_commercial_types")
}

model DogRace {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Dog        Dog[]

  @@map("dog_races")
}

model DogSize {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Dog        Dog[]

  @@map("dog_sizes")
}

model Dog {
  id               Int               @id @default(autoincrement())
  name             String
  race             DogRace           @relation(fields: [raceId], references: [id])
  raceId           Int
  birthDate        DateTime
  sex              DogSex
  status           Int // (0 - dispon√≠vel, 1 -adotado, 2 -vendido)
  commercialType   DogCommercialType @relation(fields: [commercialTypeId], references: [id])
  commercialTypeId Int
  description      String
  photo            String
  price            Float             @default(0)
  size             DogSize           @relation(fields: [dogSizeId], references: [id])
  dogSizeId        Int
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  deleted_at       DateTime?
  Adoption         Adoption[]
  Sell             Sell[]

  @@map("dogs")
}

model Adoption {
  id           Int      @id @default(autoincrement())
  dog          Dog      @relation(fields: [dogId], references: [id])
  dogId        Int
  client       Client   @relation(fields: [clientId], references: [id])
  clientId     Int
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  acceptedTerm Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("adoptions")
}

model PaymentMethod {
  id   Int    @id @default(autoincrement())
  name String
  Sell Sell[]

  @@map("payment_methods")
}

model Sell {
  id              Int           @id @default(autoincrement())
  dog             Dog           @relation(fields: [dogId], references: [id])
  dogId           Int
  client          Client        @relation(fields: [clientId], references: [id])
  clientId        Int
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  price           Float
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  @@map("sells")
}
